    	public JPanel modulePanel; // Holds each individual module
    	public JPanel moduleListPanel; // Holds the list of module panels
        public int MODULES_PER_PAGE = 3; // Number of modules to display per page
        public int currentPage = 1; // Tracks the current page
        
        private ArrayList<String> selectedModules = new ArrayList<>(); // Stores selected modules for running

        public void selectSecurityModules(JFrame frame) {
            this.frame = frame; // Set the public frame variable for external access
            frame.getContentPane().removeAll();
            frame.setSize(600, 550);
            frame.setLayout(new BorderLayout());

            // Header Panel
            JPanel headerPanel = new JPanel();
            headerPanel.setLayout(new BoxLayout(headerPanel, BoxLayout.Y_AXIS));
            headerPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15)); // Add margin around the header panel

            JLabel headerLabel = new JLabel("Account Protection Modules", SwingConstants.CENTER);
            headerLabel.setFont(new Font("SansSerif", Font.BOLD, 24));
            headerLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            headerPanel.add(headerLabel);

            headerPanel.add(Box.createVerticalStrut(10));

            JLabel descriptionLabel = new JLabel(
                    "<html>If you have modules imported in the module folder, you may load them to further secure your account. If not, you may continue.</html>",
                    SwingConstants.CENTER);
            descriptionLabel.setFont(new Font("SansSerif", Font.PLAIN, 14));
            descriptionLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            headerPanel.add(descriptionLabel);

            frame.add(headerPanel, BorderLayout.NORTH);

            // Module List Panel
            moduleListPanel = new JPanel();
            moduleListPanel.setLayout(new GridLayout(5, 1, 10, 10)); // Adjust grid rows as needed
            moduleListPanel.setBorder(BorderFactory.createEmptyBorder(10, 15, 10, 15)); // Add margin around the module panel
            JScrollPane moduleScrollPane = new JScrollPane(moduleListPanel);
            moduleScrollPane.setBorder(BorderFactory.createEmptyBorder()); // Remove scrollpane border for cleaner look
            frame.add(moduleScrollPane, BorderLayout.CENTER);

            // Footer Panel with Navigation Buttons
            JPanel footerPanel = new JPanel();
            footerPanel.setLayout(new BoxLayout(footerPanel, BoxLayout.Y_AXIS));
            footerPanel.setBorder(BorderFactory.createEmptyBorder(10, 15, 10, 15)); // Add margin around the footer panel

            // Navigation Panel for Back, Previous, Next
            JPanel navigationPanel = new JPanel();
            JButton backButton = new JButton("BACK");
            JButton selectFolderButton = new JButton("SELECT MODULE FOLDER");
            JButton previousButton = new JButton("PREVIOUS");
            JButton nextButton = new JButton("NEXT");
            JLabel pageLabel = new JLabel("PAGE 1/2", SwingConstants.CENTER);
            pageLabel.setFont(new Font("SansSerif", Font.PLAIN, 14));

            backButton.addActionListener(e -> onBackButtonPressed(frame));
            selectFolderButton.addActionListener(e -> selectModuleFolder());
            previousButton.addActionListener(e -> navigateModules(-1, pageLabel));
            nextButton.addActionListener(e -> navigateModules(1, pageLabel));

            navigationPanel.add(backButton);
            navigationPanel.add(selectFolderButton);
            navigationPanel.add(previousButton);
            navigationPanel.add(pageLabel);
            navigationPanel.add(nextButton);

            // Continue Button
            JButton continueButton = new JButton("Continue");
            continueButton.setAlignmentX(Component.CENTER_ALIGNMENT);
            continueButton.addActionListener(e -> JOptionPane.showMessageDialog(frame, "Continue clicked!"));

            footerPanel.add(navigationPanel);
            footerPanel.add(Box.createVerticalStrut(10));
            footerPanel.add(continueButton);
            frame.add(footerPanel, BorderLayout.SOUTH);

            // Load Initial Modules
            loadModules();
            frame.revalidate();
            frame.repaint();
        }
        
        private void onBackButtonPressed(JFrame frame) {
            secondGPGIdentity(frame);
        }
        
        private void navigateModules(int direction, JLabel pageLabel) {
            int totalPages = 2; 
            currentPage += direction;

            if (currentPage < 1) {
                currentPage = 1;
            } else if (currentPage > totalPages) {
                currentPage = totalPages;
            }

            pageLabel.setText("PAGE " + currentPage + "/" + totalPages);
            loadModules();
        }

        private void loadModules() {
            moduleListPanel.removeAll();

            File moduleFolder = new File("src/main/resources/modules");
            if (!moduleFolder.exists() || !moduleFolder.isDirectory()) {
                JLabel errorLabel = new JLabel("No modules folder found.");
                moduleListPanel.add(errorLabel);
                moduleListPanel.revalidate();
                moduleListPanel.repaint();
                return;
            }

            File[] moduleFiles = moduleFolder.listFiles((dir, name) -> name.endsWith(".java") || name.endsWith(".jar"));
            if (moduleFiles == null || moduleFiles.length == 0) {
                JLabel noModulesLabel = new JLabel("No modules found.");
                moduleListPanel.add(noModulesLabel);
                moduleListPanel.revalidate();
                moduleListPanel.repaint();
                return;
            }

            int start = (currentPage - 1) * MODULES_PER_PAGE;
            int end = Math.min(start + MODULES_PER_PAGE, moduleFiles.length);

            for (int i = start; i < end; i++) {
                File moduleFile = moduleFiles[i];

                String moduleName = moduleFile.getName();
                String moduleDescription = "Description not available";

                JPanel modulePanel = new JPanel();
                modulePanel.setLayout(new BorderLayout());
                modulePanel.setBorder(BorderFactory.createLineBorder(Color.GRAY));

                JLabel moduleTitle = new JLabel(moduleName);
                moduleTitle.setFont(new Font("SansSerif", Font.BOLD, 14));

                JLabel moduleDescriptionLabel = new JLabel(moduleDescription);
                moduleDescriptionLabel.setFont(new Font("SansSerif", Font.PLAIN, 12));

                JCheckBox moduleCheckBox = new JCheckBox();
                moduleCheckBox.setHorizontalAlignment(SwingConstants.RIGHT);

                moduleCheckBox.addItemListener(e -> {
                    if (e.getStateChange() == ItemEvent.SELECTED) {
                        selectedModules.add(moduleFile.getAbsolutePath());
                    } else {
                        selectedModules.remove(moduleFile.getAbsolutePath());
                    }
                });

                modulePanel.add(moduleTitle, BorderLayout.NORTH);
                modulePanel.add(moduleDescriptionLabel, BorderLayout.CENTER);
                modulePanel.add(moduleCheckBox, BorderLayout.EAST);

                moduleListPanel.add(modulePanel);
            }

            moduleListPanel.revalidate();
            moduleListPanel.repaint();
        }

        private void onContinueButtonPressed() {
            // Validate module selections (optional modules)
            if (selectedModules.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "No modules selected. Proceeding with default security settings.");
            } else {
                JOptionPane.showMessageDialog(frame, "Selected modules: " + selectedModules);
            }

            // Here, proceed to the next screen or finalize the process
            JOptionPane.showMessageDialog(frame, "Continuing to the next step...");
        }

        private void selectModuleFolder() {
            JFileChooser folderChooser = new JFileChooser();
            folderChooser.setDialogTitle("Select Modules Folder");
            folderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int returnValue = folderChooser.showOpenDialog(frame);

            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFolder = folderChooser.getSelectedFile();
                listModuleFiles(selectedFolder);
            }
        }

        private void listModuleFiles(File folder) {
        	moduleListPanel.removeAll(); // Clear previous content

            File[] jarFiles = folder.listFiles((dir, name) -> name.endsWith(".jar"));
            if (jarFiles == null || jarFiles.length == 0) {
                JLabel noModulesLabel = new JLabel("No .jar files found in the selected folder.");
                noModulesLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
                moduleListPanel.add(noModulesLabel);
            } else {
                for (File jarFile : jarFiles) {
                    JPanel modulePanel = new JPanel();
                    modulePanel.setLayout(new BoxLayout(modulePanel, BoxLayout.X_AXIS));
                    modulePanel.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10)); // Add margin

                    JLabel moduleNameLabel = new JLabel(jarFile.getName());
                    moduleNameLabel.setFont(new Font("SansSerif", Font.PLAIN, 14));
                    modulePanel.add(moduleNameLabel);

                    JCheckBox moduleCheckBox = new JCheckBox();
                    moduleCheckBox.addItemListener(e -> {
                        if (e.getStateChange() == ItemEvent.SELECTED) {
                            selectedModules.add(jarFile.getAbsolutePath());
                        } else {
                            selectedModules.remove(jarFile.getAbsolutePath());
                        }
                    });
                    modulePanel.add(Box.createHorizontalGlue());
                    modulePanel.add(moduleCheckBox);

                    moduleListPanel.add(modulePanel);
                }
            }

            moduleListPanel.revalidate();
            moduleListPanel.repaint();
            }